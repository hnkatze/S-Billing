/**
 * facturacion
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerTypes from './CustomerTypes';

/**
 * The Customer model module.
 * @module model/Customer
 * @version 1.0
 */
class Customer {
    /**
     * Constructs a new <code>Customer</code>.
     * @alias module:model/Customer
     * @param name {String} 
     * @param rtn {String} 
     * @param phoneNumber {String} 
     */
    constructor(name, rtn, phoneNumber) { 
        
        Customer.initialize(this, name, rtn, phoneNumber);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, rtn, phoneNumber) { 
        obj['name'] = name;
        obj['rtn'] = rtn;
        obj['phoneNumber'] = phoneNumber;
    }

    /**
     * Constructs a <code>Customer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Customer} obj Optional instance to populate.
     * @return {module:model/Customer} The populated <code>Customer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Customer();

            if (data.hasOwnProperty('customerId')) {
                obj['customerId'] = ApiClient.convertToType(data['customerId'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('rtn')) {
                obj['rtn'] = ApiClient.convertToType(data['rtn'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('customerType')) {
                obj['customerType'] = CustomerTypes.constructFromObject(data['customerType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Customer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Customer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Customer.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['customerId'] && !(typeof data['customerId'] === 'string' || data['customerId'] instanceof String)) {
            throw new Error("Expected the field `customerId` to be a primitive type in the JSON string but got " + data['customerId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['rtn'] && !(typeof data['rtn'] === 'string' || data['rtn'] instanceof String)) {
            throw new Error("Expected the field `rtn` to be a primitive type in the JSON string but got " + data['rtn']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }

        return true;
    }


}

Customer.RequiredProperties = ["name", "rtn", "phoneNumber"];

/**
 * @member {String} customerId
 */
Customer.prototype['customerId'] = undefined;

/**
 * @member {String} name
 */
Customer.prototype['name'] = undefined;

/**
 * @member {String} address
 */
Customer.prototype['address'] = undefined;

/**
 * @member {String} rtn
 */
Customer.prototype['rtn'] = undefined;

/**
 * @member {String} phoneNumber
 */
Customer.prototype['phoneNumber'] = undefined;

/**
 * @member {module:model/CustomerTypes} customerType
 */
Customer.prototype['customerType'] = undefined;






export default Customer;

