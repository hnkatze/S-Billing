/**
 * facturacion
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Invoice from './Invoice';

/**
 * The Report model module.
 * @module model/Report
 * @version 1.0
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * @alias module:model/Report
     * @param title {String} 
     * @param content {String} 
     * @param totalBills {Number} 
     */
    constructor(title, content, totalBills) { 
        
        Report.initialize(this, title, content, totalBills);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, title, content, totalBills) { 
        obj['title'] = title;
        obj['content'] = content;
        obj['totalBills'] = totalBills;
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('reportId')) {
                obj['reportId'] = ApiClient.convertToType(data['reportId'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('totalBills')) {
                obj['totalBills'] = ApiClient.convertToType(data['totalBills'], 'Number');
            }
            if (data.hasOwnProperty('invoices')) {
                obj['invoices'] = ApiClient.convertToType(data['invoices'], [Invoice]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Report.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['reportId'] && !(typeof data['reportId'] === 'string' || data['reportId'] instanceof String)) {
            throw new Error("Expected the field `reportId` to be a primitive type in the JSON string but got " + data['reportId']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        if (data['invoices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['invoices'])) {
                throw new Error("Expected the field `invoices` to be an array in the JSON data but got " + data['invoices']);
            }
            // validate the optional field `invoices` (array)
            for (const item of data['invoices']) {
                Invoice.validateJSON(item);
            };
        }

        return true;
    }


}

Report.RequiredProperties = ["title", "content", "totalBills"];

/**
 * @member {String} reportId
 */
Report.prototype['reportId'] = undefined;

/**
 * @member {String} title
 */
Report.prototype['title'] = undefined;

/**
 * @member {String} content
 */
Report.prototype['content'] = undefined;

/**
 * @member {Number} totalBills
 */
Report.prototype['totalBills'] = undefined;

/**
 * @member {Array.<module:model/Invoice>} invoices
 */
Report.prototype['invoices'] = undefined;






export default Report;

