/**
 * facturacion
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Article from './Article';
import Invoice from './Invoice';

/**
 * The Product model module.
 * @module model/Product
 * @version 1.0
 */
class Product {
    /**
     * Constructs a new <code>Product</code>.
     * @alias module:model/Product
     * @param amount {Number} 
     */
    constructor(amount) { 
        
        Product.initialize(this, amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount) { 
        obj['amount'] = amount;
    }

    /**
     * Constructs a <code>Product</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Product} obj Optional instance to populate.
     * @return {module:model/Product} The populated <code>Product</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Product();

            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('invoiceId')) {
                obj['invoiceId'] = ApiClient.convertToType(data['invoiceId'], 'String');
            }
            if (data.hasOwnProperty('articleId')) {
                obj['articleId'] = ApiClient.convertToType(data['articleId'], 'String');
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
            if (data.hasOwnProperty('article')) {
                obj['article'] = Article.constructFromObject(data['article']);
            }
            if (data.hasOwnProperty('invoice')) {
                obj['invoice'] = Invoice.constructFromObject(data['invoice']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Product</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Product</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Product.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['invoiceId'] && !(typeof data['invoiceId'] === 'string' || data['invoiceId'] instanceof String)) {
            throw new Error("Expected the field `invoiceId` to be a primitive type in the JSON string but got " + data['invoiceId']);
        }
        // ensure the json data is a string
        if (data['articleId'] && !(typeof data['articleId'] === 'string' || data['articleId'] instanceof String)) {
            throw new Error("Expected the field `articleId` to be a primitive type in the JSON string but got " + data['articleId']);
        }
        // validate the optional field `article`
        if (data['article']) { // data not null
          Article.validateJSON(data['article']);
        }
        // validate the optional field `invoice`
        if (data['invoice']) { // data not null
          Invoice.validateJSON(data['invoice']);
        }

        return true;
    }


}

Product.RequiredProperties = ["amount"];

/**
 * @member {String} productId
 */
Product.prototype['productId'] = undefined;

/**
 * @member {String} invoiceId
 */
Product.prototype['invoiceId'] = undefined;

/**
 * @member {String} articleId
 */
Product.prototype['articleId'] = undefined;

/**
 * @member {Number} amount
 */
Product.prototype['amount'] = undefined;

/**
 * @member {Number} price
 */
Product.prototype['price'] = undefined;

/**
 * @member {Number} total
 */
Product.prototype['total'] = undefined;

/**
 * @member {module:model/Article} article
 */
Product.prototype['article'] = undefined;

/**
 * @member {module:model/Invoice} invoice
 */
Product.prototype['invoice'] = undefined;






export default Product;

