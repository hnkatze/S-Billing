/**
 * facturacion
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Inventory from './Inventory';

/**
 * The Article model module.
 * @module model/Article
 * @version 1.0
 */
class Article {
    /**
     * Constructs a new <code>Article</code>.
     * @alias module:model/Article
     * @param stockQuantity {Number} 
     * @param costPrice {Number} 
     * @param name {String} 
     */
    constructor(stockQuantity, costPrice, name) { 
        
        Article.initialize(this, stockQuantity, costPrice, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, stockQuantity, costPrice, name) { 
        obj['stockQuantity'] = stockQuantity;
        obj['costPrice'] = costPrice;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Article</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Article} obj Optional instance to populate.
     * @return {module:model/Article} The populated <code>Article</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Article();

            if (data.hasOwnProperty('articleId')) {
                obj['articleId'] = ApiClient.convertToType(data['articleId'], 'String');
            }
            if (data.hasOwnProperty('inventoryId')) {
                obj['inventoryId'] = ApiClient.convertToType(data['inventoryId'], 'String');
            }
            if (data.hasOwnProperty('stockQuantity')) {
                obj['stockQuantity'] = ApiClient.convertToType(data['stockQuantity'], 'Number');
            }
            if (data.hasOwnProperty('costPrice')) {
                obj['costPrice'] = ApiClient.convertToType(data['costPrice'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('inventory')) {
                obj['inventory'] = Inventory.constructFromObject(data['inventory']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Article</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Article</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Article.RequiredProperties) {
            if (!data[property]) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['articleId'] && !(typeof data['articleId'] === 'string' || data['articleId'] instanceof String)) {
            throw new Error("Expected the field `articleId` to be a primitive type in the JSON string but got " + data['articleId']);
        }
        // ensure the json data is a string
        if (data['inventoryId'] && !(typeof data['inventoryId'] === 'string' || data['inventoryId'] instanceof String)) {
            throw new Error("Expected the field `inventoryId` to be a primitive type in the JSON string but got " + data['inventoryId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // validate the optional field `inventory`
        if (data['inventory']) { // data not null
          Inventory.validateJSON(data['inventory']);
        }

        return true;
    }


}

Article.RequiredProperties = ["stockQuantity", "costPrice", "name"];

/**
 * @member {String} articleId
 */
Article.prototype['articleId'] = undefined;

/**
 * @member {String} inventoryId
 */
Article.prototype['inventoryId'] = undefined;

/**
 * @member {Number} stockQuantity
 */
Article.prototype['stockQuantity'] = undefined;

/**
 * @member {Number} costPrice
 */
Article.prototype['costPrice'] = undefined;

/**
 * @member {String} name
 */
Article.prototype['name'] = undefined;

/**
 * @member {module:model/Inventory} inventory
 */
Article.prototype['inventory'] = undefined;






export default Article;

